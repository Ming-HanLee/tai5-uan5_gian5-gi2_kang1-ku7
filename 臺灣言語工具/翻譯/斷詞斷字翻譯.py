# -*- coding: utf-8 -*-
"""
著作權所有 (C) 民國103年 意傳文化科技
開發者：薛丞宏
網址：http://意傳.台灣
語料來源：請看各資料庫內說明

本程式乃自由軟體，您必須遵照SocialCalc設計的通用公共授權（Common Public Attribution License, CPAL)來修改和重新發佈這一程式，詳情請參閱條文。授權大略如下，若有歧異，以授權原文為主：
	１．得使用、修改、複製並發佈此程式碼，且必須以通用公共授權發行；
	２．任何以程式碼衍生的執行檔或網路服務，必須公開該程式碼；
	３．將此程式的原始碼當函式庫引用入商業軟體，且不需公開非關此函式庫的任何程式碼

此開放原始碼、共享軟體或說明文件之使用或散佈不負擔保責任，並拒絕負擔因使用上述軟體或說明文件所致任何及一切賠償責任或損害。

臺灣言語工具緣起於本土文化推廣與傳承，非常歡迎各界用於商業軟體，但希望在使用之餘，能夠提供建議、錯誤回報或修補，回饋給這塊土地。

感謝您的使用與推廣～～勞力！承蒙！
"""
from 臺灣言語工具.解析整理.拆文分析器 import 拆文分析器
from 臺灣言語工具.基本元素.句 import 句
from 臺灣言語工具.基本元素.章 import 章
from 臺灣言語工具.解析整理.字物件篩仔 import 字物件篩仔
from 臺灣言語工具.基本元素.組 import 組
from 臺灣言語工具.基本元素.詞 import 詞
from 臺灣言語工具.基本元素.集 import 集
'''
完整
欠詞
欠字
	農民 運動 在 當年 的 520 達到 最高潮 ， 但是 結果 農民 的 困境 從 沒 被 解決 。
欠字典
'''
class 斷詞斷字翻譯:
# 	辭典揣詞,語句連詞
	_分析器 = 拆文分析器()
	_篩仔 = 字物件篩仔()
	def __init__(self, 斷詞用戶端, 斷字用戶端):
		self.斷詞用戶端 = 斷詞用戶端
		self.斷字用戶端 = 斷字用戶端
	def 翻譯(self, 物件):
		if isinstance(物件, 章):
			return self._翻譯章物件(物件)
		return self._翻譯句物件(物件)
	def _翻譯章物件(self, 來源章物件):
		'''直接選翻上好的，免逐句生幾仔句'''
		結果章物件 = self._分析器.建立章物件('')
		來源新結構章物件 = self._分析器.建立章物件('')
		總分 = 0
		for 來源句物件 in 來源章物件.內底句:
			結果句物件, 來源新結構句物件, 分數 = self._翻譯句物件(來源句物件)
			結果章物件.內底句.append(結果句物件)
			來源新結構章物件.內底句.append(來源新結構句物件)
			總分 += 分數
		return 結果章物件, 來源新結構章物件, 總分
	def _翻譯句物件(self, 句物件, 揀幾个上好=0):
		斷詞結果句物件, 斷詞來源新結構句物件, 斷詞分數 = self.斷詞用戶端.翻譯(句物件)
		結果句物件, 來源新結構句物件, 斷字分數 = \
			self._整理斷詞翻譯的結果(斷詞結果句物件, 斷詞來源新結構句物件)
		return 結果句物件, 來源新結構句物件, 斷詞分數 + 斷字分數
	def _整理斷詞翻譯的結果(self, 斷詞結果句物件, 斷詞來源新結構句物件):
		結果句物件 = 句()
		來源新結構句物件 = 句()
		斷字全部分數 = 0
		未知詞組物件陣列 = []
		for 斷詞結果集物件, 斷詞來源集物件 in zip(斷詞結果句物件.內底集, 斷詞來源新結構句物件.內底集):
			if self._是未知詞無(斷詞結果集物件.內底組[0]):
				未知詞組物件陣列.append(斷詞結果集物件.內底組[0])
			else:
				if len(未知詞組物件陣列) > 0:
					部份斷字結果句物件, 部份斷字來源新結構句物件, 部份斷字分數 = \
						self._斷字翻譯做伙的未知詞組物件(未知詞組物件陣列)
					結果句物件.內底集.extend(部份斷字結果句物件.內底集)
					來源新結構句物件.內底集.extend(部份斷字來源新結構句物件.內底集)
					斷字全部分數 += 部份斷字分數
					未知詞組物件陣列.clear()
				
				結果句物件.內底集.append(斷詞結果集物件)
				來源新結構句物件.內底集.append(斷詞來源集物件)
				
		if len(未知詞組物件陣列) > 0:
			部份斷字結果句物件, 部份斷字來源新結構句物件, 部份斷字分數 = \
				self._斷字翻譯做伙的未知詞組物件(未知詞組物件陣列)
			結果句物件.內底集.extend(部份斷字結果句物件.內底集)
			來源新結構句物件.內底集.extend(部份斷字來源新結構句物件.內底集)
			斷字全部分數 += 部份斷字分數
			
		return 結果句物件, 來源新結構句物件, 斷字全部分數
	def _是未知詞無(self, 組物件):
			try:
				if 組物件.屬性['未知詞'] == '是':
					return True
			except:
				pass
			return False
	def _斷字翻譯做伙的未知詞組物件(self, 未知詞組物件陣列):
		字陣列 = []
		for 未知詞組物件 in 未知詞組物件陣列:
			字陣列.extend(
					self._篩仔.篩出字物件(未知詞組物件)
				)
		組物件 = 組()
		for 字物件 in 字陣列:
			詞物件 = 詞()
			詞物件.內底字 = [字物件]
			組物件.內底詞.append(詞物件)
		結果句物件, 來源新結構句物件, 分數 = self.斷字用戶端.翻譯(組物件)
		return self._斷字結果句物件集內底攏當做一詞(結果句物件), \
			self._斷字結果句物件集內底攏當做一詞(來源新結構句物件), \
			分數
	def _斷字結果句物件集內底攏當做一詞(self, 句物件):
		句物件 = 句()
		for 集物件 in 句物件.內底集:
			詞物件 = 詞()
			詞物件.內底字 = self._篩仔.篩出字物件(集物件)
			組物件 = 組()
			組物件.內底詞.append(詞物件)
			集物件 = 集()
			集物件.內底組.append(組物件)
			句物件.內底集.append(集物件)
		return 句物件
			
